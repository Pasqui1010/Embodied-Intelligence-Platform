name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-commit checks and code quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install pre-commit
      run: pip install pre-commit
    
    - name: Run pre-commit
      run: pre-commit run --all-files

  # Safety verification tests (critical - must pass)
  safety-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - uses: actions/checkout@v4
    
    - name: Build safety testing environment
      run: |
        docker build -t eip-safety-test -f docker/development/Dockerfile docker/development/
    
    - name: Run safety verification tests
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace eip-safety-test \
          bash -c "
            source /opt/ros/humble/setup.bash &&
            cd /workspace &&
            python -m pytest benchmarks/safety_benchmarks/ -v \
              --junit-xml=safety_test_results.xml \
              --cov=intelligence/eip_safety_arbiter \
              --cov-fail-under=90
          "
    
    - name: Upload safety test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-test-results
        path: safety_test_results.xml

  # Core robotics component tests
  core-tests:
    runs-on: ubuntu-latest
    needs: safety-tests
    strategy:
      matrix:
        component: [eip_slam, eip_perception, eip_navigation, eip_manipulation]
    steps:
    - uses: actions/checkout@v4
    
    - name: Build test environment
      run: |
        docker build -t eip-test -f docker/development/Dockerfile docker/development/
    
    - name: Run component tests
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace eip-test \
          bash -c "
            source /opt/ros/humble/setup.bash &&
            cd /workspace &&
            colcon build --packages-select ${{ matrix.component }} &&
            source install/setup.bash &&
            colcon test --packages-select ${{ matrix.component }} &&
            colcon test-result --verbose
          "

  # Intelligence layer tests (LLM integration)
  intelligence-tests:
    runs-on: ubuntu-latest
    needs: safety-tests
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'test-llm')
    strategy:
      matrix:
        component: [eip_llm_interface, eip_vlm_grounding, eip_task_planning]
    env:
      # Use mock API keys for testing
      OPENAI_API_KEY: "mock-key-for-testing"
      HF_TOKEN: "mock-token-for-testing"
    steps:
    - uses: actions/checkout@v4
    
    - name: Build test environment
      run: |
        docker build -t eip-intelligence-test -f docker/development/Dockerfile docker/development/
    
    - name: Run intelligence component tests
      run: |
        docker run --rm \
          -e OPENAI_API_KEY=${{ env.OPENAI_API_KEY }} \
          -e HF_TOKEN=${{ env.HF_TOKEN }} \
          -v ${{ github.workspace }}:/workspace \
          eip-intelligence-test \
          bash -c "
            source /opt/ros/humble/setup.bash &&
            cd /workspace &&
            colcon build --packages-select ${{ matrix.component }} &&
            source install/setup.bash &&
            colcon test --packages-select ${{ matrix.component }} --pytest-args '-m \"not requires_api\"'
          "

  # SLAM benchmarks
  slam-benchmarks:
    runs-on: ubuntu-latest
    needs: core-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Build benchmark environment
      run: |
        docker build -t eip-benchmark -f docker/development/Dockerfile docker/development/
    
    - name: Run SLAM accuracy benchmarks
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace eip-benchmark \
          bash -c "
            source /opt/ros/humble/setup.bash &&
            cd /workspace &&
            python -m pytest benchmarks/slam_benchmarks/ \
              --benchmark-only \
              --benchmark-json=slam_benchmark_results.json
          "
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: slam-benchmark-results
        path: slam_benchmark_results.json

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [core-tests, intelligence-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Build integration test environment
      run: |
        docker build -t eip-integration -f docker/simulation/Dockerfile docker/simulation/
    
    - name: Run end-to-end integration tests
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -e ROS_DOMAIN_ID=42 \
          eip-integration \
          bash -c "
            source /opt/ros/humble/setup.bash &&
            cd /workspace &&
            timeout 300 python -m pytest benchmarks/integration_tests/ -v \
              --junit-xml=integration_test_results.xml
          "
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: integration_test_results.xml

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and push Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [safety-tests, core-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push development image
      uses: docker/build-push-action@v4
      with:
        context: ./docker/development
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation build and deployment
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme sphinx-autobuild
    
    - name: Build documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html -W
    
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # Performance regression tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: slam-benchmarks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for comparison
    
    - name: Run performance regression tests
      run: |
        docker build -t eip-perf -f docker/development/Dockerfile docker/development/
        docker run --rm -v ${{ github.workspace }}:/workspace eip-perf \
          bash -c "
            source /opt/ros/humble/setup.bash &&
            cd /workspace &&
            python tools/performance_regression.py \
              --baseline-branch=main \
              --current-branch=${{ github.sha }} \
              --output=performance_report.json
          "
    
    - name: Comment performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('performance_report.json', 'utf8'));
          const comment = `## Performance Report\n\n${report.summary}\n\nDetailed results: [View full report](${report.url})`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Deployment readiness check
  deployment-check:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Check deployment readiness
      run: |
        echo "Running deployment readiness checks..."
        
        # Check if all critical components pass tests
        # Check if security scan found no critical vulnerabilities
        # Check if performance hasn't regressed beyond threshold
        
        python tools/deployment_readiness_check.py \
          --safety-results=safety_test_results.xml \
          --integration-results=integration_test_results.xml \
          --security-results=trivy-results.sarif \
          --performance-results=performance_report.json
    
    - name: Create deployment artifacts
      if: success()
      run: |
        # Package deployment-ready artifacts
        tar -czf eip-deployment-${{ github.sha }}.tar.gz \
          hardware/ \
          docker/deployment/ \
          examples/ \
          docs/deployment/
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: eip-deployment-${{ github.sha }}.tar.gz 